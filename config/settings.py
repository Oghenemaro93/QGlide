"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import logging
import os

from decouple import Csv, config
from datetime import timedelta
from django.core.management.utils import get_random_secret_key

LOGGER = logging.getLogger("__name__")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default=get_random_secret_key(), cast=str)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="*", cast=Csv())

SITE_ID = 1
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local apps
    'core',
    'ride',
    # 3rd party apps
    'drf_yasg',
    'corsheaders',
    'django_filters',
    'rest_framework',
    'import_export',
    #allauth apps
    'django.contrib.sites',
    'allauth',
    'allauth.account',

    # Optional -- requires install using `django-allauth[socialaccount]`.
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # dj-rest-auth for API endpoints
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

ENVIRONMENT = config("ENVIRONMENT")

if ENVIRONMENT == "production":
    DATABASES = {
        'default': {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": config("DATABASE_NAME"),
            "USER": config("DATABASE_USER"),
            "PASSWORD": config("DATABASE_PASSWORD"),
            "HOST": config("DATABASE_HOST"),
            "PORT": config("DATABASE_PORT"),
            "OPTIONS": {"sslmode": "require"},
        }
    }
else:
    DATABASES = {
        'default': {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("DATABASE_NAME"),
            "USER": config("DATABASE_USER"),
            "PASSWORD": config("DATABASE_PASSWORD"),
            "HOST": config("DATABASE_HOST"),
            "PORT": config("DATABASE_PORT"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

## swagger ui
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
    "USE_SESSION_AUTH": True,
    "LOGIN_URL": "admin/",
    "LOGOUT_URL": "admin/logout/",
}
REDOC_SETTINGS = {
    "LAZY_RENDERING": False,
    "FETCH_SCHEMA_WITH_QUERY": True,
    "REQUIRED_PROPS_FIRST": True,
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = "Africa/Lagos"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = []  # type: ignore

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOGIN_REDIRECT_URL = "/v1/auth/google_auth/"
LOGOUT_REDIRECT_URL = "/"
SOCIALACCOUNT_LOGIN_ON_GET = True
# SOCIALACCOUNT_SIGNUP_ON_GET = True

# -------------------------
# django-allauth
# -------------------------
ACCOUNT_USER_MODEL_USERNAME_FIELD = "email"

ACCOUNT_SIGNUP_FIELDS = ['email', 'first_name', 'last_name']
ACCOUNT_EMAIL_VERIFICATION = "optional"

# -------------------------
# dj-rest-auth serializers
# -------------------------
REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "core.serializers.CustomRegisterSerializer",
}

REST_AUTH_SERIALIZERS = {
    "LOGIN_SERIALIZER": "core.serializers.CustomLoginSerializer",
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        # "DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema"
    ),
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend"
    ],

}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5) if ENVIRONMENT == "production" else timedelta(days=100),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=5),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# GOOGLE_SSO_CLIENT_ID = '897216835153-b2ppvo0uf1uiiko09rdidc699v89p617.apps.googleusercontent.com'
# GOOGLE_SSO_PROJECT_ID = 'qglide-472613'
# GOOGLE_SSO_CLIENT_SECRET = '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'

# GOOGLE_SSO_ALLOWABLE_DOMAINS = ["bd470bcf0fb3.ngrok-free.app"]


REST_USE_JWT = True

# Firebase Configuration
FIREBASE_CREDENTIALS_PATH = config("FIREBASE_CREDENTIALS_PATH", default="/app/qglide.json")
FIREBASE_PROJECT_ID = config("FIREBASE_PROJECT_ID", default="qglide-firebase")
FIREBASE_INITIALIZED = False

# CORS
# Allow credentialed requests from explicit origins (recommended for browsers)
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='', cast=Csv())

# Fallback for non-browser clients (e.g., Postman) if no origins provided
if not CORS_ALLOWED_ORIGINS:
    CORS_ALLOW_ALL_ORIGINS = True

# Common headers used by SPA/frontends
CORS_ALLOW_HEADERS = list(set((
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)))

CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='', cast=Csv())
CSRF_COOKIE_DOMAIN = config('CSRF_COOKIE_DOMAIN', default='')
SECURE_SSL_REDIRECT = \
    config('SECURE_SSL_REDIRECT', '0').lower() in ['true', 't', '1']
if SECURE_SSL_REDIRECT:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Cloud Run specific settings
if ENVIRONMENT == "production":
    # Trust the proxy headers from Cloud Run
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_TLS = True

AUTH_USER_MODEL = 'core.User'

MAILERSEND_API_KEY = config("MAILERSEND_API_KEY", default="")
MAILERSEND_DOMAIN = config("MAILERSEND_DOMAIN", default="")
BREVOR_API_KEY = config("BREVOR_API_KEY", default="")

# Gmail SMTP Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@qglide.com')

# Firebase Configuration
FIREBASE_CREDENTIALS_PATH = config('FIREBASE_CREDENTIALS_PATH', default='')
FIREBASE_PROJECT_ID = config('FIREBASE_PROJECT_ID', default='')

# Initialize Firebase Admin SDK
try:
    if FIREBASE_CREDENTIALS_PATH and FIREBASE_PROJECT_ID:
        import firebase_admin
        from firebase_admin import credentials
        
        cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
        firebase_admin.initialize_app(cred, {
            'projectId': FIREBASE_PROJECT_ID,
        })
        FIREBASE_INITIALIZED = True
        LOGGER.info("Firebase Admin SDK initialized successfully")
    else:
        FIREBASE_INITIALIZED = False
        LOGGER.warning("Firebase credentials not provided, Firebase features disabled")
except Exception as e:
    FIREBASE_INITIALIZED = False
    LOGGER.error(f"Firebase initialization failed: {e}")